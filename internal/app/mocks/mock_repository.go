// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/clearthree/url-shortener/internal/app/storage (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/clearthree/url-shortener/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockRepository) BatchCreate(arg0 context.Context, arg1 map[string]models.ShortenBatchItemRequest, arg2 string) ([]models.ShortenBatchItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.ShortenBatchItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockRepositoryMockRecorder) BatchCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockRepository)(nil).BatchCreate), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockRepository) Create(arg0 context.Context, arg1, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), arg0, arg1, arg2, arg3)
}

// GetUserIDByShortURL mocks base method.
func (m *MockRepository) GetUserIDByShortURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByShortURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByShortURL indicates an expected call of GetUserIDByShortURL.
func (mr *MockRepositoryMockRecorder) GetUserIDByShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByShortURL", reflect.TypeOf((*MockRepository)(nil).GetUserIDByShortURL), arg0, arg1)
}

// Ping mocks base method.
func (m *MockRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), arg0)
}

// Read mocks base method.
func (m *MockRepository) Read(arg0 context.Context, arg1 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRepositoryMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRepository)(nil).Read), arg0, arg1)
}

// ReadByUserID mocks base method.
func (m *MockRepository) ReadByUserID(arg0 context.Context, arg1 string) ([]models.ShortURLsByUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.ShortURLsByUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserID indicates an expected call of ReadByUserID.
func (mr *MockRepositoryMockRecorder) ReadByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserID", reflect.TypeOf((*MockRepository)(nil).ReadByUserID), arg0, arg1)
}

// SetURLsInactive mocks base method.
func (m *MockRepository) SetURLsInactive(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetURLsInactive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetURLsInactive indicates an expected call of SetURLsInactive.
func (mr *MockRepositoryMockRecorder) SetURLsInactive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetURLsInactive", reflect.TypeOf((*MockRepository)(nil).SetURLsInactive), arg0, arg1)
}
