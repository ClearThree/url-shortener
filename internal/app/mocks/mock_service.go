// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/clearthree/url-shortener/internal/app/service (interfaces: ShortURLServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/clearthree/url-shortener/internal/app/models"
)

// MockShortURLServiceInterface is a mock of ShortURLServiceInterface interface.
type MockShortURLServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShortURLServiceInterfaceMockRecorder
}

// MockShortURLServiceInterfaceMockRecorder is the mock recorder for MockShortURLServiceInterface.
type MockShortURLServiceInterfaceMockRecorder struct {
	mock *MockShortURLServiceInterface
}

// NewMockShortURLServiceInterface creates a new mock instance.
func NewMockShortURLServiceInterface(ctrl *gomock.Controller) *MockShortURLServiceInterface {
	mock := &MockShortURLServiceInterface{ctrl: ctrl}
	mock.recorder = &MockShortURLServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortURLServiceInterface) EXPECT() *MockShortURLServiceInterfaceMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockShortURLServiceInterface) BatchCreate(arg0 context.Context, arg1 []models.ShortenBatchItemRequest, arg2 string) ([]models.ShortenBatchItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.ShortenBatchItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockShortURLServiceInterfaceMockRecorder) BatchCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockShortURLServiceInterface)(nil).BatchCreate), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockShortURLServiceInterface) Create(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShortURLServiceInterfaceMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShortURLServiceInterface)(nil).Create), arg0, arg1, arg2)
}

// FlushDeletions mocks base method.
func (m *MockShortURLServiceInterface) FlushDeletions() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushDeletions")
}

// FlushDeletions indicates an expected call of FlushDeletions.
func (mr *MockShortURLServiceInterfaceMockRecorder) FlushDeletions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushDeletions", reflect.TypeOf((*MockShortURLServiceInterface)(nil).FlushDeletions))
}

// GetStats mocks base method.
func (m *MockShortURLServiceInterface) GetStats(arg0 context.Context) (models.ServiceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(models.ServiceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockShortURLServiceInterfaceMockRecorder) GetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockShortURLServiceInterface)(nil).GetStats), arg0)
}

// Ping mocks base method.
func (m *MockShortURLServiceInterface) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockShortURLServiceInterfaceMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockShortURLServiceInterface)(nil).Ping), arg0)
}

// Read mocks base method.
func (m *MockShortURLServiceInterface) Read(arg0 context.Context, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Read indicates an expected call of Read.
func (mr *MockShortURLServiceInterfaceMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockShortURLServiceInterface)(nil).Read), arg0, arg1)
}

// ReadByUserID mocks base method.
func (m *MockShortURLServiceInterface) ReadByUserID(arg0 context.Context, arg1 string) ([]models.ShortURLsByUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadByUserID", arg0, arg1)
	ret0, _ := ret[0].([]models.ShortURLsByUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadByUserID indicates an expected call of ReadByUserID.
func (mr *MockShortURLServiceInterfaceMockRecorder) ReadByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadByUserID", reflect.TypeOf((*MockShortURLServiceInterface)(nil).ReadByUserID), arg0, arg1)
}

// ScheduleDeletionOfBatch mocks base method.
func (m *MockShortURLServiceInterface) ScheduleDeletionOfBatch(arg0 []models.ShortURLChannelMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScheduleDeletionOfBatch", arg0)
}

// ScheduleDeletionOfBatch indicates an expected call of ScheduleDeletionOfBatch.
func (mr *MockShortURLServiceInterfaceMockRecorder) ScheduleDeletionOfBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleDeletionOfBatch", reflect.TypeOf((*MockShortURLServiceInterface)(nil).ScheduleDeletionOfBatch), arg0)
}
